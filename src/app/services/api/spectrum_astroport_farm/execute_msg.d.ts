/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * This structure describes the execute messages available in the contract.
 */
export type FarmExecuteMsg =
  | {
      receive: Cw20ReceiveMsg;
    }
  | {
      update_config: {
        /**
         * The compound proxy contract address
         */
        compound_proxy?: string | null;
        /**
         * The controller address
         */
        controller?: string | null;
        /**
         * The performance fee
         */
        fee?: Decimal | null;
        /**
         * The fee collector contract address
         */
        fee_collector?: string | null;
        [k: string]: unknown;
      };
    }
  | {
      unbond: {
        /**
         * The LP amount to unbond
         */
        amount: Uint128;
        [k: string]: unknown;
      };
    }
  | {
      compound: {
        /**
         * The minimum expected amount of LP token
         */
        minimum_receive?: Uint128 | null;
        /**
         * Slippage tolerance when providing LP
         */
        slippage_tolerance?: Decimal | null;
        [k: string]: unknown;
      };
    }
  | {
      bond_assets: {
        /**
         * The list of asset to bond
         */
        assets: Description[];
        /**
         * The minimum expected amount of LP token
         */
        minimum_receive?: Uint128 | null;
        /**
         * The flag to skip optimal swap
         */
        no_swap?: boolean | null;
        /**
         * Slippage tolerance when providing LP
         */
        slippage_tolerance?: Decimal | null;
        [k: string]: unknown;
      };
    }
  | {
      propose_new_owner: {
        /**
         * The validity period of the proposal to change the owner
         */
        expires_in: number;
        /**
         * The newly proposed owner
         */
        owner: string;
        [k: string]: unknown;
      };
    }
  | {
      drop_ownership_proposal: {
        [k: string]: unknown;
      };
    }
  | {
      claim_ownership: {
        [k: string]: unknown;
      };
    }
  | {
      callback: CallbackMsg;
    }
  | {
      transfer: {
        amount: Uint128;
        recipient: string;
        [k: string]: unknown;
      };
    }
  | {
      burn: {
        amount: Uint128;
        [k: string]: unknown;
      };
    }
  | {
      send: {
        amount: Uint128;
        contract: string;
        msg: Binary;
        [k: string]: unknown;
      };
    }
  | {
      increase_allowance: {
        amount: Uint128;
        expires?: Expiration | null;
        spender: string;
        [k: string]: unknown;
      };
    }
  | {
      decrease_allowance: {
        amount: Uint128;
        expires?: Expiration | null;
        spender: string;
        [k: string]: unknown;
      };
    }
  | {
      transfer_from: {
        amount: Uint128;
        owner: string;
        recipient: string;
        [k: string]: unknown;
      };
    }
  | {
      send_from: {
        amount: Uint128;
        contract: string;
        msg: Binary;
        owner: string;
        [k: string]: unknown;
      };
    }
  | {
      burn_from: {
        amount: Uint128;
        owner: string;
        [k: string]: unknown;
      };
    }
  | {
      mint: {
        amount: Uint128;
        recipient: string;
        [k: string]: unknown;
      };
    }
  | {
      update_marketing: {
        /**
         * A longer description of the token and it's utility. Designed for tooltips or such
         */
        description?: string | null;
        /**
         * The address (if any) who can update this data structure
         */
        marketing?: string | null;
        /**
         * A URL pointing to the project behind this token.
         */
        project?: string | null;
        [k: string]: unknown;
      };
    }
  | {
      upload_logo: Logo;
    };
/**
 * A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u128` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);
 *
 * let b = Uint128::from(42u64); assert_eq!(b.u128(), 42);
 *
 * let c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```
 */
export type Uint128 = string;
/**
 * Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.
 *
 * This is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>
 */
export type Binary = string;
/**
 * A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0
 *
 * The greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)
 */
export type Decimal = string;
/**
 * This enum describes available Token types. ## Examples ``` # use cosmwasm_std::Addr; # use astroport::asset::AssetInfo::{NativeToken, Token}; Token { contract_addr: Addr::unchecked("terra...") }; NativeToken { denom: String::from("uluna") }; ```
 */
export type AssetInfo =
  | {
      token: {
        contract_addr: Addr;
        [k: string]: unknown;
      };
    }
  | {
      native_token: {
        denom: string;
        [k: string]: unknown;
      };
    };
/**
 * A human readable address.
 *
 * In Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.
 *
 * This type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.
 *
 * This type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.
 */
export type Addr = string;
/**
 * This structure describes the callback messages of the contract.
 */
export type CallbackMsg =
  | {
      stake: {
        /**
         * The minimum expected amount of LP token
         */
        minimum_receive?: Uint128 | null;
        /**
         * The previous LP balance in the contract
         */
        prev_balance: Uint128;
        [k: string]: unknown;
      };
    }
  | {
      bond_to: {
        /**
         * The minimum expected amount of LP token
         */
        minimum_receive?: Uint128 | null;
        /**
         * The previous LP balance in the contract
         */
        prev_balance: Uint128;
        /**
         * The address to bond LP
         */
        to: Addr;
        [k: string]: unknown;
      };
    };
/**
 * Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)
 */
export type Expiration =
  | {
      at_height: number;
    }
  | {
      at_time: Timestamp;
    }
  | {
      never: {
        [k: string]: unknown;
      };
    };
/**
 * A point in time in nanosecond precision.
 *
 * This type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.
 *
 * ## Examples
 *
 * ``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);
 *
 * let ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```
 */
export type Timestamp = Uint64;
/**
 * A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u64` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);
 *
 * let b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```
 */
export type Uint64 = string;
/**
 * This is used for uploading logo data, or setting it in InstantiateData
 */
export type Logo =
  | {
      url: string;
    }
  | {
      embedded: EmbeddedLogo;
    };
/**
 * This is used to store the logo on the blockchain in an accepted format. Enforce maximum size of 5KB on all variants.
 */
export type EmbeddedLogo =
  | {
      svg: Binary;
    }
  | {
      png: Binary;
    };

/**
 * Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg
 */
export interface Cw20ReceiveMsg {
  amount: Uint128;
  msg: Binary;
  sender: string;
  [k: string]: unknown;
}
/**
 * This enum describes a Terra asset (native or CW20).
 */
export interface Description {
  /**
   * A token amount
   */
  amount: Uint128;
  /**
   * Information about an asset stored in a [`AssetInfo`] struct
   */
  info: AssetInfo;
  [k: string]: unknown;
}
