/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u64` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);
 *
 * let b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```
 */
export type Uint64 = string;
/**
 * A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u128` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);
 *
 * let b = Uint128::from(42u64); assert_eq!(b.u128(), 42);
 *
 * let c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```
 */
export type Uint128 = string;

/**
 * This structure describes the parameters used for creating a contract.
 */
export interface InstantiateMsg {
  /**
   * Dual rewards proxy contracts allowed to interact with the generator
   */
  allowed_reward_proxies: string[];
  /**
   * ASTRO token contract address
   */
  astro_token: string;
  /**
   * Address of factory contract
   */
  factory: string;
  /**
   * Address that can set active generators and their alloc points
   */
  generator_controller?: string | null;
  /**
   * Address of guardian
   */
  guardian?: string | null;
  /**
   * Address that can change contract settings
   */
  owner: string;
  /**
   * Start block for distributing ASTRO
   */
  start_block: Uint64;
  /**
   * Amount of ASTRO distributed per block among all pairs
   */
  tokens_per_block: Uint128;
  /**
   * The ASTRO vesting contract that drips ASTRO rewards
   */
  vesting_contract: string;
  /**
   * The voting escrow contract address
   */
  voting_escrow?: string | null;
  /**
   * Whitelist code id
   */
  whitelist_code_id: number;
  [k: string]: unknown;
}
