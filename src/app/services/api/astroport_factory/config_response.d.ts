/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A human readable address.
 *
 * In Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.
 *
 * This type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.
 *
 * This type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.
 */
export type Addr = string;
/**
 * This enum describes available pair types. ## Available pool types ``` # use astroport::factory::PairType::{Custom, Stable, Xyk}; Xyk {}; Stable {}; Custom(String::from("Custom")); ```
 */
export type PairType =
  | {
      xyk: {
        [k: string]: unknown;
      };
    }
  | {
      stable: {
        [k: string]: unknown;
      };
    }
  | {
      custom: string;
    };

/**
 * A custom struct for each query response that returns general contract settings/configs.
 */
export interface ConfigResponse {
  /**
   * Address of contract to send governance fees to (the Maker)
   */
  fee_address?: Addr | null;
  /**
   * Address of contract used to auto_stake LP tokens for Astroport pairs that are incentivized
   */
  generator_address?: Addr | null;
  /**
   * Addres of owner that is allowed to change contract parameters
   */
  owner: Addr;
  /**
   * IDs of contracts which are allowed to create pairs
   */
  pair_configs: PairConfig[];
  /**
   * CW20 token contract code identifier
   */
  token_code_id: number;
  /**
   * CW1 whitelist contract code id used to store 3rd party rewards for staking Astroport LP tokens
   */
  whitelist_code_id: number;
  [k: string]: unknown;
}
/**
 * This structure stores a pair type's configuration.
 */
export interface PairConfig {
  /**
   * ID of contract which is allowed to create pairs of this type
   */
  code_id: number;
  /**
   * Whether a pair type is disabled or not. If it is disabled, new pairs cannot be created, but existing ones can still read the pair configuration
   */
  is_disabled: boolean;
  /**
   * Setting this to true means that pairs of this type will not be able to get an ASTRO generator
   */
  is_generator_disabled: boolean;
  /**
   * The amount of fees (in bps) collected by the Maker contract from this pair type
   */
  maker_fee_bps: number;
  /**
   * The pair type (provided in a [`PairType`])
   */
  pair_type: PairType;
  /**
   * The total fees (in bps) charged by a pair of this type
   */
  total_fee_bps: number;
  [k: string]: unknown;
}
