/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type ExecuteMsg =
  | {
      receive: Cw20ReceiveMsg;
    }
  | {
      execute_swap_operations: {
        minimum_receive?: Uint128 | null;
        operations: SwapOperation[];
        to?: string | null;
        [k: string]: unknown;
      };
    }
  | {
      execute_swap_operation: {
        operation: SwapOperation;
        to?: string | null;
        [k: string]: unknown;
      };
    }
  | {
      assert_minimum_receive: {
        asset_info: AssetInfo;
        minimum_receive: Uint128;
        prev_balance: Uint128;
        receiver: string;
        [k: string]: unknown;
      };
    };
/**
 * A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u128` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);
 *
 * let b = Uint128::from(42u64); assert_eq!(b.u128(), 42);
 *
 * let c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```
 */
export type Uint128 = string;
/**
 * Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.
 *
 * This is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>
 */
export type Binary = string;
export type SwapOperation =
  | {
      native_swap: {
        ask_denom: string;
        offer_denom: string;
        [k: string]: unknown;
      };
    }
  | {
      terra_swap: {
        ask_asset_info: AssetInfo;
        offer_asset_info: AssetInfo;
        [k: string]: unknown;
      };
    };
/**
 * AssetInfo contract_addr is usually passed from the cw20 hook so we can trust the contract_addr is properly validated.
 */
export type AssetInfo =
  | {
      token: {
        contract_addr: string;
        [k: string]: unknown;
      };
    }
  | {
      native_token: {
        denom: string;
        [k: string]: unknown;
      };
    };

/**
 * Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg
 */
export interface Cw20ReceiveMsg {
  amount: Uint128;
  msg: Binary;
  sender: string;
  [k: string]: unknown;
}
